'''1. –ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ 
ùëò –∏ ùëè –ø—Ä—è–º–æ–π.
2. –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –¥–æ –ø—Ä—è–º–æ–π –∏ –∏—Ö —Å—É–º–º—ã.
3. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–º 
ùëò-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π (kNN).

–ü–æ—è—Å–Ω–µ–Ω–∏–µ: 
-–ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:
–í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 
k –∏ b –¥–ª—è –ø—Ä—è–º—ã—Ö, –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∏—Ö –æ–±–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –¥–æ –ø—Ä—è–º—ã—Ö.

-–†–∞—Å—Å—Ç–æ—è–Ω–∏—è:
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ø—Ä—è–º–æ–π 
‚à£ùëòùë•‚àíùë¶+ùëè‚à£/sqrt(k^2+1)
–°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä—è–º–æ–π.

-–ú–µ—Ç–æ–¥ ùëò-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π:
–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ—á–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–≤—É—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π.
'''
import math
from math import sqrt

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ k (–Ω–∞–∫–ª–æ–Ω–∞ –ø—Ä—è–º–æ–π)
def find_k(points):
    lst_x, lst_y = zip(*points)
    multiply_sum = sum(a[0] * a[1] for a in points)
    sum_x = sum(lst_x)
    sum_y = sum(lst_y)
    square_x_sum = sum([x ** 2 for x in lst_x])
    return (len(lst_x) * multiply_sum - sum_x * sum_y) / (len(points) * square_x_sum - sum_x ** 2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ b (—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–ª–µ–Ω–∞)
def find_b(points, a):
    lst_x, lst_y = zip(*points)
    sum_x = sum(lst_x)
    sum_y = sum(lst_y)
    return (sum_y - a * sum_x) / len(points)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ø—Ä—è–º–æ–π y = kx + b
def distance_to_line(x, y, k, b):
    return abs(k * x - y + b) / sqrt(k ** 2 + 1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º k-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
def classify_point_knn(points1, points2, target_point, k):
    distances = []

    # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ —Ç–æ—á–µ–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    for point in points1:
        dist = sqrt((target_point[0] - point[0]) ** 2 + (target_point[1] - point[1]) ** 2)
        distances.append((dist, 0))  # –ú–µ—Ç–∫–∞ 0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞

    # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ —Ç–æ—á–µ–∫ –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    for point in points2:
        dist = sqrt((target_point[0] - point[0]) ** 2 + (target_point[1] - point[1]) ** 2)
        distances.append((dist, 1))  # –ú–µ—Ç–∫–∞ 1 –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    distances.sort()

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ k –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
    nearest_neighbors = distances[:k]

    # –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
    count_cluster1 = sum(1 for d in nearest_neighbors if d[1] == 0)
    count_cluster2 = sum(1 for d in nearest_neighbors if d[1] == 1)

    return 0 if count_cluster1 > count_cluster2 else 1

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
points1 = [(4, 2), (3, -2), (3, 3), (1, 8)]
points2 = [(5, 1), (6, 4), (7, 2), (5, -3)]
target_point = [3, 4]  # –¢–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π –ø—Ä—è–º—ã—Ö
k1 = find_k(points1)
b1 = find_b(points1, k1)
k2 = find_k(points2)
b2 = find_b(points2, k2)

print(f"–ü—Ä—è–º–∞—è 1: y = {k1:.2f}x + {b1:.2f}")
print(f"–ü—Ä—è–º–∞—è 2: y = {k2:.2f}x + {b2:.2f}")

# –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä—è–º–æ–π –∏ –∏—Ö —Å—É–º–º—ã
distances1 = [distance_to_line(x, y, k1, b1) for x, y in points1]
sum_distances1 = sum(distances1)

# –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –¥–æ –≤—Ç–æ—Ä–æ–π –ø—Ä—è–º–æ–π –∏ –∏—Ö —Å—É–º–º—ã
distances2 = [distance_to_line(x, y, k2, b2) for x, y in points2]
sum_distances2 = sum(distances2)

print(f"–°—É–º–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –∫ –ø–µ—Ä–≤–æ–π –ø—Ä—è–º–æ–π: {sum_distances1:.2f}")
print(f"–°—É–º–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ç–æ—á–µ–∫ –∫–æ –≤—Ç–æ—Ä–æ–π –ø—Ä—è–º–æ–π: {sum_distances2:.2f}")

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º k-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
k = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π
cluster = classify_point_knn(points1, points2, target_point, k)
cluster_name = "–ø–µ—Ä–≤–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É" if cluster == 0 else "–≤—Ç–æ—Ä–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É"

print(f"–¢–æ—á–∫–∞ {target_point} –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {cluster_name}.")
