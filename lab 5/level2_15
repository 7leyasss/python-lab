Для каждой из трех заданных матриц найти среднее значение ее элементов без учета максимального и минимального элементов. Полученные значения занести в одномерный массив. Определить, об-разовали ли полученные значения убывающую или возрастающую последовательность. Нахождение среднего значения элементов ма трицы оформить в вид метода.
import numpy as np

def calculate_average_without_min_max(matrix):
    # Преобразуем матрицу в одномерный массив
    flat_matrix = matrix.flatten()
    
    # Находим максимальное и минимальное значения
    max_val = np.max(flat_matrix)
    min_val = np.min(flat_matrix)

    # Убираем максимальное и минимальное значения и рассчитываем среднее
    filtered_values = [val for val in flat_matrix if val != max_val and val != min_val]

    # Проверяем, есть ли оставшиеся значения
    if filtered_values:
        average = np.mean(filtered_values)
        return average
    else:
        return None  # Если все элементы были удалены

def is_increasing(sequence):
    return all(x < y for x, y in zip(sequence, sequence[1:]))

def is_decreasing(sequence):
    return all(x > y for x, y in zip(sequence, sequence[1:]))

# Пример трех матриц
matrix1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
matrix2 = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
matrix3 = np.array([[5, 3, 2], [1, 4, 0], [7, 6, 8]])

# Получение средних значений
averages = [
    calculate_average_without_min_max(matrix1),
    calculate_average_without_min_max(matrix2),
    calculate_average_without_min_max(matrix3)
]

# Проверка последовательности
if is_increasing(averages):
    print("Средние значения образуют возрастающую последовательность.")
elif is_decreasing(averages):
    print("Средние значения образуют убывающую последовательность.")
else:
    print("Средние значения не образуют ни возрастающую, ни убывающую последовательность.")

print("Средние значения:", averages)
