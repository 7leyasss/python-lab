import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return np.sin(x) + 0.5 * x**2 - 1
def df(x):
    return np.cos(x) + x
approx_min = -0.5 
def gradientDescend(func=lambda x: x**2, diffFunc=lambda x: 2*x, 
                   x0=3, speed=0.01, epochs=100):
    xList = []
    yList = []
    x = x0
    
    for _ in range(epochs):
        xList.append(x)
        yList.append(func(x))
        x = x - speed * diffFunc(x)
    
    return xList, yList

def plot_results(xList, yList, func, x_range=(-3, 3)):
    x_vals = np.linspace(x_range[0], x_range[1], 400)
    y_vals = func(x_vals)
    
    plt.figure(figsize=(10, 6))
    plt.plot(x_vals, y_vals, label='Функция f(x)')
    plt.scatter(xList, yList, color='red', label='Точки градиентного спуска')
    plt.plot(xList, yList, 'r--', alpha=0.3)
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.title('Градиентный спуск')
    plt.legend()
    plt.grid(True)
    plt.show()

x0 = 2
speed = 0.1
epochs = 50

x_points, y_points = gradientDescend(f, df, x0=x0, speed=speed, epochs=epochs)
plot_results(x_points, y_points, f, x_range=(-2, 3))
final_x = x_points[-1]
final_y = y_points[-1]
print(f"Начальная точка: {x0}")
print(f"Конечная точка: x = {final_x:.4f}, f(x) = {final_y:.4f}")
print(f"Примерный минимум: x ≈ {approx_min}, f(x) ≈ {f(approx_min):.4f}")

def find_critical_speed(func, diffFunc, x0=2, target=approx_min, tol=0.1):
    low = 0.001
    high = 1.0
    best_speed = low
    
    for _ in range(20): 
        mid = (low + high) / 2
        x_points, _ = gradientDescend(func, diffFunc, x0=x0, speed=mid, epochs=50)
        final_x = x_points[-1]
        
        if abs(final_x - target) < tol:
            best_speed = mid
            low = mid
        else:
            high = mid
    return best_speed

critical_speed = find_critical_speed(f, df)
print(f"\nГраничное значение скорости (speed): ~{critical_speed:.4f}")
print(f"При speed > {critical_speed:.4f} метод может расходиться")
