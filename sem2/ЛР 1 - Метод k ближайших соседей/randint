import random
import math
from collections import Counter
import matplotlib.pyplot as plt

def generate_data(pointsCount1=50, pointsCount2=50):
    xMin1, xMax1 = 1, 3
    yMin1, yMax1 = 1, 3
    xMin2, xMax2 = 3, 5
    yMin2, yMax2 = 3, 5
    
    class1 = [(random.uniform(xMin1, xMax1), random.uniform(yMin1, yMax1)) for _ in range(pointsCount1)]
    class2 = [(random.uniform(xMin2, xMax2), random.uniform(yMin2, yMax2)) for _ in range(pointsCount2)]
    
    x = class1 + class2
    y = [0] * pointsCount1 + [1] * pointsCount2
    
    return x, y

def train_test_split(x, y, p=0.8):
    combined = list(zip(x, y))
    random.shuffle(combined)
    x_shuffled, y_shuffled = zip(*combined)
    
    split_idx = int(len(x) * p)
    x_train = list(x_shuffled[:split_idx])
    x_test = list(x_shuffled[split_idx:])
    y_train = list(y_shuffled[:split_idx])
    y_test = list(y_shuffled[split_idx:])
    
    return x_train, x_test, y_train, y_test

def euclidean_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)

def fit(x_train, y_train, x_test, k=3):
    y_predict = []
    
    for test_point in x_test:
        distances = []
        for i, train_point in enumerate(x_train):
            dist = euclidean_distance(train_point, test_point)
            distances.append((dist, y_train[i]))
        
        distances.sort(key=lambda x: x[0])
        neighbors = distances[:k]
        
        neighbor_classes = [neighbor[1] for neighbor in neighbors]
        most_common = Counter(neighbor_classes).most_common(1)
        predicted_class = most_common[0][0]
        
        y_predict.append(predicted_class)
    
    return y_predict

def compute_accuracy(y_test, y_predict):
    correct = sum(1 for true, pred in zip(y_test, y_predict) if true == pred)
    return correct / len(y_test)

def visualize(x_train, y_train, x_test, y_test, y_predict):
    plt.figure(figsize=(10, 8))
    
    x_train_class0 = [point[0] for point, label in zip(x_train, y_train) if label == 0]
    y_train_class0 = [point[1] for point, label in zip(x_train, y_train) if label == 0]
    x_train_class1 = [point[0] for point, label in zip(x_train, y_train) if label == 1]
    y_train_class1 = [point[1] for point, label in zip(x_train, y_train) if label == 1]
    
    plt.scatter(x_train_class0, y_train_class0, c='blue', marker='o', label='Train Class 0')
    plt.scatter(x_train_class1, y_train_class1, c='blue', marker='x', label='Train Class 1')
    

    x_test_correct0 = [point[0] for point, true, pred in zip(x_test, y_test, y_predict) if true == 0 and true == pred]
    y_test_correct0 = [point[1] for point, true, pred in zip(x_test, y_test, y_predict) if true == 0 and true == pred]
    x_test_correct1 = [point[0] for point, true, pred in zip(x_test, y_test, y_predict) if true == 1 and true == pred]
    y_test_correct1 = [point[1] for point, true, pred in zip(x_test, y_test, y_predict) if true == 1 and true == pred]
    
    plt.scatter(x_test_correct0, y_test_correct0, c='green', marker='o', label='Test Correct Class 0')
    plt.scatter(x_test_correct1, y_test_correct1, c='green', marker='x', label='Test Correct Class 1')

    x_test_wrong0 = [point[0] for point, true, pred in zip(x_test, y_test, y_predict) if true == 0 and true != pred]
    y_test_wrong0 = [point[1] for point, true, pred in zip(x_test, y_test, y_predict) if true == 0 and true != pred]
    x_test_wrong1 = [point[0] for point, true, pred in zip(x_test, y_test, y_predict) if true == 1 and true != pred]
    y_test_wrong1 = [point[1] for point, true, pred in zip(x_test, y_test, y_predict) if true == 1 and true != pred]
    
    plt.scatter(x_test_wrong0, y_test_wrong0, c='red', marker='o', label='Test Wrong Class 0')
    plt.scatter(x_test_wrong1, y_test_wrong1, c='red', marker='x', label='Test Wrong Class 1')
    
    plt.xlabel('X coordinate')
    plt.ylabel('Y coordinate')
    plt.title('k-NN Classification Results')
    plt.legend()
    plt.grid(True)
    plt.show()

def main():
    x, y = generate_data()
    x_train, x_test, y_train, y_test = train_test_split(x, y)
    y_predict = fit(x_train, y_train, x_test)
    accuracy = compute_accuracy(y_test, y_predict)
    print(f"Accuracy: {accuracy:.2f}")
    visualize(x_train, y_train, x_test, y_test, y_predict)

if __name__ == "__main__":
    main()
